These notes should be merged into the appropriate document.

We'll use the internal FQDN, which should be output of 'hostname -f' as the server FQDN. This must be all lower-case!

  ruby -e 'puts %x{hostname -f}.downcase'

  vi ~/bootstrap.json

  # On server:
  { "chef": { "server_fqdn": "domu-12-31-39-02-c1-23.compute-1.internal" }, "recipes": "chef::server" }

  # On clients:
  { "chef": { "server_fqdn": "domu-12-31-39-02-c1-23.compute-1.internal" }, "recipes": "chef::client" }

  chef-solo -j ~/bootstrap.json -r http://s3.amazonaws.com/chef-solo/bootstrap-latest.tar.gz
  /etc/init.d/chef-client stop
  
Access webui, accept self signed certificate
Log in using your openid

We'll lock down the allowed openids in a bit.

(getting chef-repo steps ommitted here)
  git clone git://github.com/opscode/cookbooks.git cookbooks
  vi config/rake.rb
  slappasswd -s "some password here" # on workstation or elsewhere
  {SSHA}Y6HSsZremATlLsE2GmRvIY7GZJV6qjG9
  vi config/ops_master.json
    chef server_fqdn
    openldap rootpw, server, basedn
  vi config/openldap.ldif
  rake ssl_cert FQDN=`hostname -f'`
  cp certificates/`hostname -f`.pem site-cookbooks/openldap/files/default/ssl
  mkdir -p site-cookbooks/chef/templates/default
  vi site-cookbooks/chef/templates/default/server.rb.erb
    authorized_openid_identifiers ["your_id.myopenid.com", "teammate.myopenid.com"]

  rake install

Authorize the node in the webui

  chef-client -j config/ops_master.json
  
  (output will be in /var/log/chef/client.log)

might have to:

  rm -rf /etc/ldap/slapd*
  chef-client -j config/ops_master.json
  slapadd -l config/openldap.ldif
    (correct any errors in the ldif, rerun above)
  /etc/init.d/slapd start
  getent passwd
should have USERID and railsdev

At this point, the chef-server AMI is up and running.

Start up a Database Node.

create database.json on the database node, start with the one in config/database.json in chef-repo.
  vi ~/database.json
    chef server_fqdn
    openldap server
    
Other values as applicable for environment (basedn, etc)

Chef client should be bootstrapped at this point, authorize in the webui.

  chef-client -j ~/database.json

Go to the node in the webui and get the value of the root password (randomly generated).

Start up a Rails Application Node.

Create application.json,
  vi ~/application.json
    chef server_fqdn
    openldap server
    
  chef-client -j ~/application.json
  
Need to move railsdev to a local account, not ldap, because ldap is dumb.

## Start Here For Clients ##
Need the lowercase ops master FQDN.
  domu-12-31-39-00-6a-32.compute-1.internal
  
Launch an instance, log in when it is up.

Update /etc/chef/client.rb and the json files locally replacing the existing chef_server_fqdn with the correct from above.
  perl -i.bak -wpl -e 's/chef_server_fqdn/domu-12-31-39-00-6a-32.compute-1.internal/;' *.json /etc/chef/client.rb

Edit the appropriate JSON file (database or application, need database server first) if other changes are needed for your environment (such as the Rails application settings, change the LDAP basedn, other attributes can be added, see the cookbooks).

Get the validation_token value from the ops master, it will be in the node attribute chef[:server_token]. Create /etc/chef/validation_token with its contents equal to this value.

Run chef-client, specifying the json file appropriately. 
  chef-client -t `cat /etc/chef/validation_token` -j database.json 
  chef-client -t `cat /etc/chef/validation_token` -j application.json 

The node should register with the server automatically with the token, then run the appropriate recipes. 